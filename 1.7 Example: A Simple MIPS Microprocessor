R·∫•t hay! Ph·∫ßn **1.7 ‚Äì Example: A Simple MIPS Microprocessor** trong s√°ch *CMOS VLSI Design* l√† m·ªôt v√≠ d·ª• c·ª±c k·ª≥ quan tr·ªçng v√¨:

* N√≥ **k·∫øt h·ª£p t·∫•t c·∫£ nh·ªØng g√¨ b·∫°n h·ªçc ·ªü c√°c ph·∫ßn tr∆∞·ªõc**: transistor ‚Üí gate ‚Üí block ‚Üí system.
* L√† **b√†i h·ªçc ƒëi·ªÉn h√¨nh v·ªÅ Design Partitioning + RTL**.
* N·∫øu b·∫°n ƒëang l√†m CPU 8-bit ho·∫∑c ƒë·ªì √°n t·ªï h·ª£p HDL th√¨ c√†ng h·ªØu √≠ch.

---

## üß† **M·ª•c ti√™u ph·∫ßn 1.7 l√† g√¨?**

Gi√∫p b·∫°n **hi·ªÉu c√°ch thi·∫øt k·∫ø m·ªôt vi x·ª≠ l√Ω ƒë∆°n gi·∫£n** theo t·ª´ng t·∫ßng:

* **Ki·∫øn tr√∫c MIPS (ISA)**
* **Vi ki·∫øn tr√∫c (Microarchitecture)**
* **C·∫•u tr√∫c RTL v√† layout t·ªïng th·ªÉ**

---

## üß± **1.7.1 MIPS Architecture ‚Äì Ki·∫øn tr√∫c MIPS c∆° b·∫£n**

### üìå ƒê·∫∑c ƒëi·ªÉm:

* **32-bit** RISC (Reduced Instruction Set Computer)
* **3 lo·∫°i l·ªánh**: R-type (to√°n h·ªçc), I-type (nh·∫≠p/xu·∫•t), J-type (nh·∫£y)
* Thanh ghi: 32 thanh ghi, m·ªói thanh ghi 32 bit
* G·ªìm c√°c l·ªánh ƒë∆°n gi·∫£n: `add`, `sub`, `lw`, `sw`, `beq`, `j`

> ‚è© MIPS ƒë∆∞·ª£c ch·ªçn v√¨ ƒë∆°n gi·∫£n, d·ªÖ pipeline, d·ªÖ t·ªï ch·ª©c m·∫°ch.

---

## üß∞ **1.7.2 Multicycle MIPS Microarchitecture ‚Äì Vi ki·∫øn tr√∫c nhi·ªÅu chu k·ª≥**

> Thay v√¨ x·ª≠ l√Ω m·ªói l·ªánh trong 1 chu k·ª≥ (single-cycle), MIPS n√†y chia ra nhi·ªÅu chu k·ª≥ ‚Üí **gi·∫£m ph·∫ßn c·ª©ng, d·ªÖ t·ªï ch·ª©c logic**.

### üí° **C√°c b∆∞·ªõc x·ª≠ l√Ω l·ªánh** (m·ªói b∆∞·ªõc l√† 1 chu k·ª≥):

| Chu k·ª≥ | T√™n                         | M√¥ t·∫£                       |
| ------ | --------------------------- | --------------------------- |
| 1      | **Instruction Fetch (IF)**  | L·∫•y l·ªánh t·ª´ b·ªô nh·ªõ          |
| 2      | **Instruction Decode (ID)** | Gi·∫£i m√£ l·ªánh, ƒë·ªçc thanh ghi |
| 3      | **Execute (EX)**            | Th·ª±c hi·ªán ALU               |
| 4      | **Memory (MEM)**            | Load/Store n·∫øu c√≥           |
| 5      | **Writeback (WB)**          | Ghi k·∫øt qu·∫£ v√†o thanh ghi   |

‚úÖ **∆Øu ƒëi·ªÉm**:

* ALU, RAM ƒë∆∞·ª£c chia th·ªùi gian d√πng ‚Üí ti·∫øt ki·ªám ph·∫ßn c·ª©ng
* M·ªói chu k·ª≥ th·ª±c hi·ªán 1 ph·∫ßn nh·ªè ‚Üí d·ªÖ thi·∫øt k·∫ø ƒëi·ªÅu khi·ªÉn

---

## üß† **C·∫•u tr√∫c kh·ªëi t·ªïng th·ªÉ** g·ªìm:

* **Program Counter (PC)** ‚Äì tr·ªè ƒë·ªãa ch·ªâ l·ªánh hi·ªán t·∫°i
* **Instruction Memory** ‚Äì ROM ch·ª©a m√£ l·ªánh
* **Register File** ‚Äì t·∫≠p thanh ghi
* **ALU** ‚Äì th·ª±c hi·ªán to√°n h·ªçc
* **Data Memory** ‚Äì ch·ª©a d·ªØ li·ªáu
* **Control Unit** ‚Äì b·ªô ƒëi·ªÅu khi·ªÉn FSM sinh t√≠n hi·ªáu ƒëi·ªÅu khi·ªÉn

---

## üìê **V√≠ d·ª• thi·∫øt k·∫ø RTL cho l·ªánh `lw`**

```verilog
// M√¥ t·∫£ lu·ªìng d·ªØ li·ªáu (Register Transfer Level)
IR = Mem[PC];        // IF
PC = PC + 4;
A = Reg[IR[25:21]];  // ID
B = Reg[IR[20:16]];
ALUOut = A + IR[15:0]; // EX
MDR = Mem[ALUOut];     // MEM
Reg[IR[20:16]] = MDR;  // WB
```

---

## üß∞ **B√†i h·ªçc r√∫t ra t·ª´ ph·∫ßn 1.7:**

* **T∆∞ duy chia t·∫ßng r√µ r√†ng** (ISA ‚Üí Vi ki·∫øn tr√∫c ‚Üí RTL)
* D√πng **FSM ƒë·ªÉ ƒëi·ªÅu khi·ªÉn tu·∫ßn t·ª±**
* S·ª≠ d·ª•ng l·∫°i ph·∫ßn c·ª©ng ‚Üí ti·∫øt ki·ªám t√†i nguy√™n
* M·ªói b∆∞·ªõc x·ª≠ l√Ω l·ªánh t∆∞∆°ng ·ª©ng v·ªõi tr·∫°ng th√°i FSM ‚Üí d·ªÖ code HDL

---

B·∫°n mu·ªën m√¨nh:

1. V·∫Ω s∆° ƒë·ªì block t·ªïng qu√°t c·ªßa MIPS Multicycle?
2. Vi·∫øt th·ª≠ RTL b·∫±ng Verilog cho 1 l·ªánh ƒë∆°n gi·∫£n (v√≠ d·ª•: `lw`)?
3. Gi√∫p b·∫°n l√†m CPU 8-bit theo ki·ªÉu n√†y?

B·∫°n ch·ªçn h∆∞·ªõng n√†o?
